unit Terminal;

interface

uses CPDrv, SysUtils, DateUtils, Vcl.Graphics;

type

  //Оператор мобильной связи
  TGsmOperator = record
    id : integer;
    Name : String;
    color: Tcolor;
  end;

  // Информации о терминале
  TterminalInfo = record
     head:byte;
     answer: byte;
     ProdDate: array[0..02]   of byte; // Дата производства
     ID:       array[0..03]   of byte; // ID терминала
     coding:   array[0..03]   of byte; // Опции (G|GC|GW|GWC)
     SW:       array[0..04]   of byte; // Версия прошивки
     name:     array[0..31]   of byte; // Название терминала
     MAC_EN:byte;
     MAC_AP:   array[0..05]   of byte; // MAC точки доступа
     MAC_ST:   array[0..05]   of byte; // MAC
     GSM_ENB:byte;
     SIM_ID:   array[0..19]   of byte; // ID сим карты
     check:byte;
  end;

  Tconfig = record //Просто конфигурация
     TerminalName: array[0..31]  of byte;  // Имя терминала
     ServerSyncTS: array[0..3]   of byte;  // TS синхронизация с сервером. Используется во время работы. При настройке должно задаваться 0
     HWSetting1:   array[0..3]   of byte;  // hardware настройка 1
     CANDriverName:array[0..15]  of byte;  // Имя файла драйвера
     CANDriverTS:  array[0..3]   of byte;  // UnixTime файла драйвера
     CANDriverData:array[0..99]  of byte;  // Данные файла драйвера
     HWSetting2:   array[0..44]  of byte;  // hardware настройка 2
     WIFICfg:      array[0..114] of byte;  // Настройки wi-fi
     ServerAddress:array[0..37]  of byte;  // Адрес сервера
     ServerPort:   array[0..1]   of byte;  // Порт
     HWSetting3:   array[0..19]  of byte;  // hardware настройка 2
  end;

  //Конфигурация терминала с проверочными байтами
  TterminalConfig = record
     head:byte;
     answer: byte;
     config:Tconfig;
     check:byte;
  end;

  Tterminal = class
  const
    ATTEMPT_AMOUNT     = 5;        // Количество попыток отправки сообщения
    CMD_HEAD_REQUST    = $55;      // Заголовок запроса
    CMD_HEAD_RESPONSE  = $AA;      // Заголовок ответа
    CMD_TEST_CONNECT   = $01;      // Тест соединения
    CMD_CONFIG_READ    = $EC;      // Прочитать конфигурацию
    CMD_CONFIG_WRITE   = $ED;      // Записать конфигурацию
    CMD_TERMINAL_INFO  = $0F;      // Информация о терминале

    SECTION_COUNT      = 4;
    SECTION_HW         = 1;
    SECTION_CAN        = 2;
    SECTION_WIFI       = 3;
    SECTION_Server     = 4;

  private
     FCommPort: TCommPortDriver;    // Поле для хранения ссылки на TCommPortDriver
     IsEmptyConfig:Boolean;         // Заполнялась ли конфигурация
     IsEmptyCompositeConfig: array[1..SECTION_COUNT]  of boolean;//Части конфигурации
     procedure checkIsFull;
     function getSumData:byte;      // Сумма байтов данных packageData
     function paсkageChecked:byte;  // Получить проверочный байт
     function printformat(mac :Tarray<byte>; symbol :String =':'):String; //Форматирование
  public
     packageData:Tarray<byte>;      // Данные для отправки в Терминал
     packageCmd:byte;               // Команда для отправки

     //-------Информация о терминале --------------------------
     TerminalInfo : TterminalInfo;

     //-------Конфигурация терминала -------------------------
     TermianlConfig : TterminalConfig;
//     config : Tconfig;

     CanDriverNameBuf : String;

     constructor Create(ACommPort: TCommPortDriver=nil);     // Конструктор класса с параметром

     function getSW:String;                                  // Получение версии прошивки в формтае vX.X(dd.mm.YY)
     function getProdDate:String;                            // Дата производства преобразованная
     function decodeCoding:String;                           // получить название опции (G|GC|GW|GWC)
     function getCANDriverTS:String;                         // Дата создания CAN файла
     function getNameTerminal:String;                        // Получить имя строкой
     function getNameTerminalConfig:String;                  // Имя в конфигурации
     function makeCommad:Tarray<byte>;                       // Собрать пакет для отправки
     function getCANDriverName:String;                       // Имя драйвера CAN
     function checkAnswer(_data:Tarray<byte>): Tarray<byte>; // Проверочный байт
     function getTerminalID:String;                          // Получение ID терминала
     function getMacAp:String;                               // Получение форматированного MAC_AP
     function getMacST:String;                               // Получение форматированного MAC_ST
     function getSimID:String;                               // Получение SIM_ID
     function getCANSpeed:String;                            // Получение скорости CAN шины
     function getWifiOperatingMode: boolean;
     function getWifiNameAccessPoint:String;                 // Получение названия точки доступа
     function getWifiNameClientPoint:String;                 // Получение названия сети клиента
     function getServerAdress: String;                       // Получение Адреса сервера
     function getServerPort: word;                           // Получение Порт сервера
     function getHWcanStatus : String;                       // Получение информации о CAN из HW setting1

     function getGsmOperator:TGsmOperator;
     function getConfig380:Tbytes;

     //---set----
     function setHW(data:Tbytes): Boolean;
     function setHW(data:T
     function setCAN(data:Tbytes): Boolean;
     function setwifi(data:Tbytes): Boolean;
     function setServ(data:Tbytes): Boolean;
     function setWifiServ(data: Tbytes): Boolean;
     //---set----
     function setTerminalName(const Value: string):boolean;


     function stringToHex(strToConvert : String):TBytes;// Преобразование в hex
     function IsEmptyConfiguration:boolean;                  // Заполнена конфигурация или нет
     procedure setCompositeConfig(index:integer);
     procedure setCanDriverName(name : String);// Установить имя драйвера
     procedure loadConfig(newConfig:Tbytes);
     procedure ping;                                 // Проверка связи
     procedure info;                                 // Информация о терминале
     procedure clearInfo;                            // Очистка данных Информации
     procedure clearConfigInfo;                      // Очистка данных Конфигурации
     procedure stopBootloader;                       // Выход из бутлоадера
     procedure getTerminalConfig;                    // Получить конфигурацию
     procedure send(_data:Tarray<byte>);             // Отправка данных
     procedure sendСonfirmation(_data:Tarray<byte>); // Отправка данных многократно
     procedure firmware;
     procedure resetTerminal;

     function getWifiIPClientPoint:String;
     function getWifiOperatingModeClient:boolean; //Ркжим работы wifi клиента
     function getWifiMode:String;

     function GetBit(const AByte: Byte; const ABitIndex: Integer): Boolean;
     function getAccelerometr:String;
  end;

implementation

constructor Tterminal.Create(ACommPort: TCommPortDriver = nil);
begin
  FCommPort := ACommPort; // Присваиваем ссылку на TCommPortDriver полю FCommPort
end;

//Перезагрузка терминала
procedure Tterminal.resetTerminal;
begin
  packageCmd := $F0;
  packageData := [$D9,$FF];
  send(Self.makeCommad);
end;

//Установка имени драйвера
procedure Tterminal.setCanDriverName(name : String);
var _nameHex : Tbytes;
    _nameBuf : String;
    i:integer;
begin
  //Заполняем пробелами все имя
  FillChar(TermianlConfig.config.CANDriverName, SizeOf(TermianlConfig.config.CANDriverName), $20);

  //Если имя больше обрезаем
   if Length(name) > 16 then
    _nameBuf := Copy(name, 1, 16)
  else
    _nameBuf := name;

  //Перекодировка
  _nameHex := TEncoding.ASCII.GetBytes(_nameBuf);

  //Копируем
  for  i:= 0 to Length(_nameBuf)-1 do
    TermianlConfig.config.CANDriverName[i] := _nameHex[i];

  TermianlConfig.config.CANDriverName[15] := 0;
end;

//Отправка сообщений с проверкой ответа в Терминал
procedure Tterminal.sendСonfirmation(_data:Tarray<byte>);
var
  answer : byte;
  count : integer;
begin
  if Assigned(FCommPort) then
  begin
    count := 0;
    //Сообщение отправляется пока в ответ не придёт байт $AA
    //Или не исчерпается число попыток
    //Или не закроется соединение
    while True do
      begin
        FCommPort.SendData(_data,Length(_data));
        if (answer = CMD_HEAD_RESPONSE) or
           (count >= ATTEMPT_AMOUNT) or
           (FCommPort.Connected = false)
        then
            break;               
        inc(count);
      end;
  end;
end;

//Отправка сообщений 
procedure Tterminal.send(_data:Tarray<byte>);
var
  answer : byte;
  count : integer;
begin
  if Assigned(FCommPort) and (FCommPort.Connected) then
  begin
    FCommPort.SendData(_data,Length(_data));
  end;
end;

//Получение суммы всех данных
function Tterminal.getSumData:byte;
var
  sum:integer;
  ByteValue: Byte;
begin
  sum := 0;
  for ByteValue in packageData do
    Sum := Sum + ByteValue;

  result:=byte(sum);
end;

//Собираем команду для отправки на терминал
//function Tterminal.makeCommad:Tarray<byte>;
//var _data:Tarray<byte>;
//    i,dataLength : integer;
//begin
//   dataLength := Length(packageData);
//   SetLength(_data,dataLength+3);
//   _data[0] := CMD_HEAD_REQUST;
//   _data[1] := packageCmd;
//
//   for i := 0 to dataLength-1 do
//      _data[i+2] := packageData[i];
//
//
//   _data[dataLength+2] := paсkageChecked;
//
//   result := _data;
//end;

function Tterminal.makeCommad: TArray<Byte>;
var temp : Tarray<byte>;
begin
  Result := [CMD_HEAD_REQUST, packageCmd] + packageData + [paсkageChecked];
end;

//Получение проверочного байта
function Tterminal.paсkageChecked: Byte;
begin
  result := byte($FF - (CMD_HEAD_REQUST + packageCmd + getSumData));
end;

//Проверка связи с терминалом
procedure Tterminal.ping;
begin
  packageCmd := CMD_TEST_CONNECT;
  packageData := [];
  send(Self.makeCommad);
end;

//Получение конфигурации
procedure Tterminal.getTerminalConfig;
begin
  packageCmd := CMD_CONFIG_READ;
  packageData := [];
  send(self.makeCommad);
end;

//Получение информации о Терминале
procedure Tterminal.info;
begin
  try
    packageCmd := CMD_TERMINAL_INFO;
    packageData := [];
    send(self.makeCommad);
  finally

  end;

end;

//Выход из режима загрузчика
procedure Tterminal.stopBootloader;
begin
  packageCmd := $FE;
  packageData:=[$49, $0B];
  send(self.makeCommad);
end;

// Запись конфигурации в терминал
procedure Tterminal.firmware();
var
  _config : Tbytes;
  i: Integer;
  firmware : Tbytes;
begin
  SetLength(_config, Sizeof(TermianlConfig)-1);
  SetLength(firmware, 382);
  firmware[0] := $3F;
  firmware[1] := $51;
  Move(TermianlConfig, _config[0], Sizeof(TermianlConfig)-1);
  for I := 2 to 381 do
    firmware[i] := _config[i];
  packageCmd := CMD_CONFIG_WRITE;
  packageData:= firmware;
  send(self.makeCommad);
end;

//Обработка ответа
function Tterminal.checkAnswer(_data:Tarray<byte>): Tarray<byte>;
var i:integer;
begin
  //Информации о терминале
  if _data[1] = CMD_TERMINAL_INFO then
    begin
      if Length(_data) = SizeOf(TterminalInfo) then
        Move(_data[0], TerminalInfo, SizeOf(TterminalInfo));// Копируем данные в структуру
    end;

   //конфигурация терминала
  if _data[1] = CMD_CONFIG_READ then
    begin
      if Length(_data) = SizeOf(TterminalConfig) then
        Move(_data[0], TermianlConfig, SizeOf(TterminalConfig)); // Копируем данные в структуру
    end;
end;

//Загрузка конфигурации
procedure Tterminal.loadConfig(newConfig:Tbytes);
var seek : integer; //Пропустить байт
begin
  if Length(newConfig) < SizeOf(TermianlConfig.config) then
    raise Exception.Create('Недостаточно байтов для заполнения структуры');

  // Копируем байты в поля структуры
  Move(newConfig[0],   TermianlConfig.config.TerminalName[0],  SizeOf(TermianlConfig.config.TerminalName));
  seek:= SizeOf(TermianlConfig.config.TerminalName);

  Move(newConfig[seek],  TermianlConfig.config.ServerSyncTS[0],  SizeOf(TermianlConfig.config.ServerSyncTS));
  seek:= seek + SizeOf(TermianlConfig.config.ServerSyncTS);

  Move(newConfig[seek],  TermianlConfig.config.HWSetting1[0],    SizeOf(TermianlConfig.config.HWSetting1));
  seek:= seek + SizeOf(TermianlConfig.config.HWSetting1);

  Move(newConfig[seek],  TermianlConfig.config.CANDriverName[0], SizeOf(TermianlConfig.config.CANDriverName));
  seek:= seek + SizeOf(TermianlConfig.config.CANDriverName);

  Move(newConfig[seek],  TermianlConfig.config.CANDriverTS[0],   SizeOf(TermianlConfig.config.CANDriverTS));
  seek:= seek + SizeOf(TermianlConfig.config.CANDriverTS);

  Move(newConfig[seek],  TermianlConfig.config.CANDriverData[0], SizeOf(TermianlConfig.config.CANDriverData));
  seek:= seek + SizeOf(TermianlConfig.config.CANDriverData);

  Move(newConfig[seek], TermianlConfig.config.HWSetting2[0],    SizeOf(TermianlConfig.config.HWSetting2));
  seek:= seek + SizeOf(TermianlConfig.config.HWSetting2);

  Move(newConfig[seek], TermianlConfig.config.WIFICfg[0],       SizeOf(TermianlConfig.config.WIFICfg));
  seek:= seek + SizeOf(TermianlConfig.config.WIFICfg);

  Move(newConfig[seek], TermianlConfig.config.ServerAddress[0], SizeOf(TermianlConfig.config.ServerAddress));
  seek:= seek + SizeOf(TermianlConfig.config.ServerAddress);

  Move(newConfig[seek], TermianlConfig.config.ServerPort[0],    SizeOf(TermianlConfig.config.ServerPort));
  seek:= seek + SizeOf(TermianlConfig.config.ServerPort);

  Move(newConfig[seek], TermianlConfig.config.HWSetting3[0],    SizeOf(TermianlConfig.config.HWSetting3));
end;

//----------Пос. обработка------------------------------------------------------


// Получение названия из Информации о терминале
function Tterminal.getNameTerminal:String;
var
  temp:array[0..32] of byte;
begin
  move(TerminalInfo.name[0], temp, 32);
  temp[32] := 0;
  result := PAnsiChar(@temp);
end;

//Получение названия из конфигурации
function Tterminal.getNameTerminalConfig:String;
var
  asciiString: string;
  Temp:array[0..32] of byte;
begin
  move(TermianlConfig.config.TerminalName[0],Temp,32);
  Temp[32] := 0; //Добавляем символ конца строки
  result := PAnsiChar(@Temp[0]);
end;

//перевод в строковое значение coding
function Tterminal.decodeCoding:String;
var 
  i, x :integer;
begin
  //Ищем заполненый байт
  for i := 0 to 3 do
    if TerminalInfo.coding[i] <> $0 then x:=i;

  case TerminalInfo.coding[x] of
    $02: result:= 'G';
    $08: result:= 'W';
    $0A: result:= 'GW';
    $82: result:= 'GC';
    $88: result:= 'WC';
    $8A: result:= 'GWC';
  end;
end;

//Получение даты производства 
function Tterminal.getProdDate:String;
var OutputStr: string;
begin
    // Проверка на разумность значений
  if (TerminalInfo.ProdDate[0] >= 1) and (TerminalInfo.ProdDate[0] <= 31) and
     (TerminalInfo.ProdDate[1] >= 1) and (TerminalInfo.ProdDate[1] <= 12) then
  begin
    // Отображение даты в формате "день.месяц.год"
    OutputStr := Format('%.2d.%.2d.%d',
     [TerminalInfo.ProdDate[0],
     TerminalInfo.ProdDate[1],
     TerminalInfo.ProdDate[2]]
     );
  end
  else
  begin
    OutputStr := 'Некорректная дата';
  end;
   result:=OutputStr;
end;

//Получение версии прошивки в формтае vX.X(dd.mm.YY)
function Tterminal.getSW:String;
begin
  result:= Format('v%d.%d(%.2d.%.2d.%d)',[
  TerminalInfo.SW[0],
  TerminalInfo.SW[1],
  TerminalInfo.SW[2],
  TerminalInfo.SW[3],
  TerminalInfo.SW[4]]
  );
end;

//Очистить информацию о Информации терминала
procedure Tterminal.clearInfo;
var i:integer;
begin
  FillChar(terminalInfo, SizeOf(TterminalInfo), 0);
end;

//Очистить информацию о Конфигурации терминала
//Проверям вся ли конфигурация заполнена
procedure Tterminal.checkIsFull;
var flag:boolean;
    i:integer;
begin
    flag:=true;
    for I := 1 to SECTION_COUNT do
      if not IsEmptyCompositeConfig[i]  then
        begin
          flag:=false;
          Break;
        end;
  // Если заполняя конфигурацию по частям, мы заполнили всю,
  // тогда опускаем флаг пустой конфигурации
  if flag = true then IsEmptyConfig := false;
end;

procedure Tterminal.clearConfigInfo;
var i:integer;
begin
  FillChar(TermianlConfig, SizeOf(TterminalConfig), 0);
end;

//Получить имя драйвера CAN
function Tterminal.getAccelerometr: String;
var
  bit_0:boolean;
  bit_1:boolean;
begin
 bit_0 := GetBit(TermianlConfig.config.HWSetting3[4], 0);
 bit_1 := GetBit(TermianlConfig.config.HWSetting3[4], 1);

 if (bit_0 = false) and (bit_1 = false) then result := 'Отключен';
 if (bit_0 = True)  and (bit_1 = false) then result := 'Внутренний';
 if (bit_0 = False) and (bit_1 = True)  then result := 'Внешний';
 if (bit_0 = True)  and (bit_1 = True)  then result := 'Внутренний с автопереключением на внешний';

end;

function Tterminal.getCANDriverName:String;
var
  asciiString: string;
  temp:array[0..16] of byte;
begin
  move(TermianlConfig.config.CANDriverName[0], temp, 16);
  result := PAnsiChar(@temp);
end;

//Получить ДатуВремя файла драйвера CAN
function Tterminal.getCANDriverTS:String;
begin

end;

//Преобразование ID в строку
function Tterminal.getTerminalID:String;
var st: string;
    i: integer;
begin
  for I := 0 to 3 do
    st := st + IntToHex(TerminalInfo.ID[i], 2);
  result := st;
end;

// Преобразования из массива строку, с разделителем
function Tterminal.printformat(mac :Tarray<byte>; symbol :String =':'):String;
var
  st : string;
  i : integer;
begin
  for  i := 0 to Length(mac)-1 do
    if i <> Length(mac)-1  then st := st + IntToHex(mac[i], 2)+symbol
                           else st := st + IntToHex(mac[i], 2);
  result:=st;
end;

//Получение MAC_AP
function Tterminal.getMacAp:String;
var 
  i : integer;
  len : integer;
  mac : Tarray<byte>;
begin
  if TerminalInfo.MAC_EN = $00 then
  begin
    result := '-:-:-:-:-:-';
    exit;
  end;
  len := Length(TerminalInfo.MAC_AP);
  SetLength(mac, len);
  for i := 0 to len-1 do
    mac[i] := TerminalInfo.MAC_AP[i];

  result := printformat(mac);
end;

//Получение MAC_ST
function Tterminal.getMacSt:String;
var
  i : integer;
  len : integer;
  mac : Tarray<byte>;
begin
  if TerminalInfo.MAC_EN = $00 then
  begin
    result := '-:-:-:-:-:-';
    exit;
  end;
  len := Length(TerminalInfo.MAC_ST);
  SetLength(mac, len);
  for i := 0 to len-1 do
    mac[i] :=  TerminalInfo.MAC_ST[i];

  result := printformat(mac);
end;

//Получение SIM_ID
function Tterminal.getSimID:String;
var
  SimIdWithoutLastByte: AnsiString;
begin
  //Если байт запрета возвращаем -
  if TerminalInfo.GSM_ENB = $00 then
    begin
      Result := '-';
      exit;
    end;
  SetString(SimIdWithoutLastByte, PAnsiChar(@TerminalInfo.SIM_ID[0]), Length(TerminalInfo.SIM_ID));
  result := SimIdWithoutLastByte;
end;

//Получение скорости CAN
function Tterminal.getCANSpeed:String;
var 
  speedBits: Integer;
begin
  try
// Конкатенируем два байта в одно 16-битное число
  speedBits := ( TermianlConfig.config.CANDriverData[4] shl 8) or TermianlConfig.config.CANDriverData[5];
  if speedBits <> 0 then result := floattostr(100000/speedBits);
  except

  end;

end;

function Tterminal.getWifiOperatingMode: boolean;
var Wifisetting:Byte;
    WifiOff:boolean; // Отключен
begin
   // Mode: 0 - отключен, 1-точка доступа, 2-клиент
   Wifisetting := TermianlConfig.config.WIFICfg[0]; //Режим работы wifi
   WifiOff := GetBit(Wifisetting, 0);
   result := WifiOff;
end;

// Получение названия точки доступа
function Tterminal.getWifiNameAccessPoint:String;
var
  buff: string;
begin
  try
    if getWifiOperatingMode then buff:='Disabled'
                            else buff:= PAnsiChar(@TermianlConfig.config.WIFICfg[2]);
     if buff <> '' then result := buff
                   else result := '-';
  except
    result:='';
  end;
end;

// Получение названия точки доступа Клиент сети
function Tterminal.getWifiNameClientPoint:String;
var buf:String;
begin
  try
    buf := PAnsiChar(@TermianlConfig.config.WIFICfg[48]);
    result := Copy(buf, 1, 16);
  except
    result:='';
  end;
end;

// Получение адреса поделючения сервера
function Tterminal.getServerAdress: String;
begin
  result := PAnsiChar(@TermianlConfig.config.ServerAddress[0]);
end;

//Получение порта подключения сервера
function Tterminal.getServerPort: Word;
begin
  result := (TermianlConfig.config.ServerPort[0] shl 8) or TermianlConfig.config.ServerPort[1]
end;

// Получение статуса CAN
function Tterminal.getHWcanStatus : String;
begin
  case TermianlConfig.config.HWSetting1[3] of
    $00: result:= 'Отключен';
    $01: result:= 'Базовый';
    $02: result:= 'Внешний файл';
  end;
end;

//Преобразование из строки в HEX
function Tterminal.stringToHex(strToConvert : String):TBytes;
var
  hexResult: TBytes;
  i: Integer;
begin
  Result := [];
  if strToConvert = '' then
    Exit;

  // Преобразуем каждый символ строки в его шестнадцатеричное значение
  SetLength(hexResult, Length(strToConvert));
  for i := 0 to Length(strToConvert) - 1 do
  begin
    hexResult[i] := Ord(strToConvert[i + 1]);
  end;

  Result := hexResult;
end;

//Получение оператора мобильной связи
function Tterminal.getGsmOperator:TGsmOperator;
var buf:String;
begin


  if pos('G', decodeCoding) = 0  then //Если нет модема
  begin
    result.Name := 'БЕЗ GSM МОДУЛЯ';
    result.id := -1;
    result.color := clblack;
    exit;
  end;

  if getSimID = '-' then
  begin
    result.Name := 'Определение оператора связи...';
    result.id := -1;
    result.color := clred;
    exit;
  end;

  buf:=copy(getSimID,0,7); //Берем первые 7 символов simId
  result.color := clblack;

  if buf = '8970101' then
  begin
      result.Name := 'МТС (Россия)';
      result.id := 0;
  end else

  if buf = '8970199' then
  begin
      result.Name := 'Билайн (Россия)';
      result.id := 1;
  end else

  if buf = '8970102' then
  begin
      result.Name := 'Мегафон (Россия)';
      result.id := 2;
  end else

  if buf = '8999701' then
  begin
      result.Name := 'Билайн (Казахстан)';
      result.id := 3;
  end else

  if buf = '8937501' then
  begin
      result.Name := 'Велком (Беларусь)';
      result.id := 4;
  end else

  if buf = '8999302' then
  begin
      result.Name := 'TM CELL (Туркменистан)';
      result.id := 5;
  end else

  if buf = '8937204' then
  begin
      result.Name := 'M2M Express (Россия)';
      result.id := 6;
  end else

  if buf = '8999807' then
  begin
      result.Name := 'UMS (Узбекистан)';
      result.id := 7;
  end else

  if buf = '8999893' then
  begin
      result.Name := 'UCELL (Узбекистан)';
      result.id := 8;
  end else
  begin //Неизвестный оператор
      result.Name := 'НЕИЗВЕСТНЫЙ ОПЕРАТОР СВЯЗИ';
      result.id := -1;
      result.color := clred;
  end;
end;


function Tterminal.getConfig380:Tbytes;
var buf:Tbytes;
begin

end;


//Возвращаем состояние IsEmptyConfig
function Tterminal.IsEmptyConfiguration:boolean;
begin
 result := IsEmptyConfig;
end;

//Отмечаем какая часть конфигурации заполнена,
procedure Tterminal.setCompositeConfig(index:integer);
begin
 IsEmptyCompositeConfig[index] := true;
 checkIsFull;
end;

//--------------SET-----------------------------------


//Установка HW из массива (69 байт)
function Tterminal.setHW(data:Tbytes): Boolean;
begin
  result:=false;
  if Length(data) <> 69 then exit;

  move(data[0],TermianlConfig.config.HWSetting1[0],4);
  move(data[4],TermianlConfig.config.HWSetting2[0],45);
  move(data[49],TermianlConfig.config.HWSetting3[0],20);
  result:=true;
end;



//Установка CAN драйвера (имя файла 16, метка времени 4, данные драйвера 100)
function Tterminal.setCAN(data:Tbytes): Boolean;
begin
  result:=false;
  if Length(data) <> 120 then exit;

  move(data[0],TermianlConfig.config.CANDriverName[0],16);
  move(data[16],TermianlConfig.config.CANDriverTS[0],4);
  move(data[20],TermianlConfig.config.CANDriverData[0],100);
  result:=true;
end;

//Установка wifi
function Tterminal.setWifi(data:Tbytes): Boolean;
begin
  result := false;
  if Length(data) <> 115 then exit;

  move(data[0], TermianlConfig.config.WIFICfg[0], 115);
  result:=true;
end;

//Установка Server
function Tterminal.setServ(data:Tbytes): Boolean;
begin
  result := false;
  if Length(data) <> 40 then exit;

  move(data[0],TermianlConfig.config.ServerAddress[0],38);
  move(data[38],TermianlConfig.config.ServerPort[0],2);
  result:=true;
end;

function Tterminal.setWifiServ(data: Tbytes): Boolean;
begin
  result := false;
  if Length(data) <> 155 then exit;

  move(data[0], TermianlConfig.config.WIFICfg[0], 115);
  setCompositeConfig(SECTION_WIFI);
  move(data[115],  TermianlConfig.config.ServerAddress[0],38);
  move(data[115+38], TermianlConfig.config.ServerPort[0],2);
  setCompositeConfig(SECTION_Server);
  result := false;
end;
//--------------SET-----------------------------------

//Получение бита из байта
function Tterminal.GetBit(const AByte: Byte; const ABitIndex: Integer): Boolean;
begin
  Result := (AByte and (1 shl ABitIndex)) <> 0;
end;

// Получения байта настройки wifi клиента
function Tterminal.getWifiOperatingModeClient: boolean;
var Wifisetting:Byte;
    Dynamics:boolean; // Отключен
begin
   // Mode: 0 - отключен, 1-точка доступа, 2-клиент
   Wifisetting := TermianlConfig.config.WIFICfg[47]; //Режим работы wifi
   Dynamics := GetBit(Wifisetting, 2);
   result := Dynamics;
end;


function Tterminal.getWifiIPClientPoint:String;
var
  buff: string;
begin
  if getWifiOperatingModeClient
    then
    buff:= Format('%d.%d.%d.%d', [TermianlConfig.config.WIFICfg[81],
                                    TermianlConfig.config.WIFICfg[82],
                                    TermianlConfig.config.WIFICfg[83],
                                    TermianlConfig.config.WIFICfg[84]])
    else buff := 'Dynamic';

  result := buff;
end;


function Tterminal.getWifiMode: String;
var Wifisetting:Byte;     //Байт насстройки wifi
    bit_0:boolean;   // бит 0
    bit_1:boolean;   // бит 1
begin
   // Mode: 0 - отключен, 1-точка доступа, 2-клиент
   Wifisetting := TermianlConfig.config.WIFICfg[0]; //Режим работы wifi
   bit_0 := GetBit(Wifisetting, 0);
   bit_1 := GetBit(Wifisetting, 1);
          //0           0    - отключен
   if not bit_0 and not bit_1 then result:='Отключен';
          //0           1    - клиент сети
   if not bit_0 and     bit_1 then result:='Клиент сети';
          //1           0    - точка доступа
   if     bit_0 and not bit_1 then result:='Точка доступа WIFI';
          //1           1    - смешанный
   if     bit_0 and     bit_1 then result:='Смешанный';
end;


function Tterminal.setTerminalName(const Value: string): boolean;
var
  Index: Integer;
begin
  result := false;
  if Length(Value) > 32 then exit;

  // Записываем каждый символ строки в массив
  for Index := 1 to Length(Value) do
    TermianlConfig.config.TerminalName[Index - 1] := Ord(Value[Index]);

  // Дополняем оставшиеся элементы массива нулевыми значениями
  for Index := Length(Value) to High(TermianlConfig.config.TerminalName) do
    TermianlConfig.config.TerminalName [Index] := 0;
end;


end.
